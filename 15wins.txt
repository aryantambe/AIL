import random

# Function to check if the game is over
def check_winner(board):
    # Rows, columns, diagonals
    winning_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
        [0, 4, 8], [2, 4, 6]              # Diagonals
    ]
    
    for combination in winning_combinations:
        if board[combination[0]] == board[combination[1]] == board[combination[2]] and board[combination[0]] != ' ':
            return board[combination[0]]  # X or O winner
    
    if ' ' not in board:
        return 'D'  # Draw
    
    return None  # Game is not over

# Min-Max Algorithm for the AI to make the best move
def min_max(board, depth, is_maximizing):
    winner = check_winner(board)
    
    # If the game is over, return score based on the winner
    if winner == 'X':  # AI (X) is maximizing
        return 1
    elif winner == 'O':  # Player (O) is minimizing
        return -1
    elif winner == 'D':  # Draw
        return 0
    
    if is_maximizing:
        best_score = -float('inf')
        for i in range(len(board)):
            if board[i] == ' ':
                board[i] = 'X'  # AI move
                score = min_max(board, depth + 1, False)
                board[i] = ' '  # Undo move
                best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for i in range(len(board)):
            if board[i] == ' ':
                board[i] = 'O'  # Player move
                score = min_max(board, depth + 1, True)
                board[i] = ' '  # Undo move
                best_score = min(score, best_score)
        return best_score

# Function to make the computer's move
def computer_move(board):
    best_score = -float('inf')
    best_move = None
    for i in range(len(board)):
        if board[i] == ' ':
            board[i] = 'X'  # AI move
            score = min_max(board, 0, False)
            board[i] = ' '  # Undo move
            if score > best_score:
                best_score = score
                best_move = i
    board[best_move] = 'X'

# Function to print the current game board
def print_board(board):
    print(f"{board[0]} | {board[1]} | {board[2]}")
    print("--+---+--")
    print(f"{board[3]} | {board[4]} | {board[5]}")
    print("--+---+--")
    print(f"{board[6]} | {board[7]} | {board[8]}")

# Main game loop
def play_game():
    board = [' ' for _ in range(9)]
    print("Welcome to Modified Tic-Tac-Toe!")
    print("You are 'O' and the computer is 'X'.")
    
    while True:
        # Player move
        print_board(board)
        move = int(input("Enter your move (0-8): "))
        if board[move] == ' ':
            board[move] = 'O'
        else:
            print("Invalid move. Try again.")
            continue
        
        # Check if the game is over after player's move
        winner = check_winner(board)
        if winner:
            print_board(board)
            if winner == 'O':
                print("You win!")
            elif winner == 'X':
                print("Computer wins!")
            else:
                print("It's a draw!")
            break
        
        # Computer move
        computer_move(board)
        
        # Check if the game is over after computer's move
        winner = check_winner(board)
        if winner:
            print_board(board)
            if winner == 'O':
                print("You win!")
            elif winner == 'X':
                print("Computer wins!")
            else:
                print("It's a draw!")
            break

# Start the game
if __name__ == "__main__":
    play_game()

