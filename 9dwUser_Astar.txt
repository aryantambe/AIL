import heapq

def a_star(graph, heuristics, start, goal):
    open_list = []
    heapq.heappush(open_list, (heuristics[start], start))
    g_costs = {start: 0}
    parent = {start: None}

    while open_list:
        _, current = heapq.heappop(open_list)

        if current == goal:
            path = []
            while current is not None:
                path.append(current)
                current = parent[current]
            return path[::-1]

        for neighbor, weight in graph.get(current, []):
            g_cost = g_costs[current] + weight
            if neighbor not in g_costs or g_cost < g_costs[neighbor]:
                g_costs[neighbor] = g_cost
                f_cost = g_cost + heuristics[neighbor]
                heapq.heappush(open_list, (f_cost, neighbor))
                parent[neighbor] = current

    return None

def main():
    graph = {}
    heuristics = {}

    n = int(input("Enter number of edges: "))
    print("Enter edges in format: start end weight")
    for _ in range(n):
        u, v, w = input().split()
        w = int(w)
        if u not in graph:
            graph[u] = []
        graph[u].append((v, w))

    m = int(input("Enter number of nodes for heuristics: "))
    print("Enter heuristic in format: node heuristic_value")
    for _ in range(m):
        node, h = input().split()
        heuristics[node] = int(h)

    start = input("Enter start node: ")
    goal = input("Enter goal node: ")

    path = a_star(graph, heuristics, start, goal)

    if path:
        print("Path found:", " -> ".join(path))
    else:
        print("No path found.")

if __name__ == "__main__":
    main()


