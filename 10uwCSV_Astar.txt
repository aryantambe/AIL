import csv
import heapq

def read_graph_from_csv(edges_file, heuristics_file):
    graph = {}
    heuristics = {}

    # Read edges
    with open(edges_file, mode='r') as f:
        reader = csv.DictReader(f)
        for row in reader:
            u, v, w = row['start'], row['end'], int(row['weight'])
            graph.setdefault(u, []).append((v, w))
            graph.setdefault(v, []).append((u, w))  # Because undirected

    # Read heuristics
    with open(heuristics_file, mode='r') as f:
        reader = csv.DictReader(f)
        for row in reader:
            heuristics[row['vertex']] = int(row['heuristic'])

    return graph, heuristics

def a_star(graph, heuristics, start, goal):
    open_list = []
    heapq.heappush(open_list, (heuristics[start], start))
    g_costs = {start: 0}
    parent = {start: None}

    while open_list:
        _, current = heapq.heappop(open_list)

        if current == goal:
            path = []
            while current is not None:
                path.append(current)
                current = parent[current]
            return path[::-1]

        for neighbor, weight in graph.get(current, []):
            g_cost = g_costs[current] + weight
            if neighbor not in g_costs or g_cost < g_costs[neighbor]:
                g_costs[neighbor] = g_cost
                f_cost = g_cost + heuristics[neighbor]
                heapq.heappush(open_list, (f_cost, neighbor))
                parent[neighbor] = current

    return None

def main():
    edges_file = "edges.csv"
    heuristics_file = "heuristic.csv"

    graph, heuristics = read_graph_from_csv(edges_file, heuristics_file)

    start = input("Enter the start node: ").strip()
    goal = input("Enter the goal node: ").strip()

    path = a_star(graph, heuristics, start, goal)

    if path:
        print("Path found:", " -> ".join(path))
    else:
        print("No path found.")

if __name__ == "__main__":
    main()



