import networkx as nx
def dfs_non_recursive(graph, start_node):
    visited = set()
    seq = []
    stack = [start_node]
    while stack:
        node = stack.pop()
        if node not in visited:
            seq.append(node)
            visited.add(node)
            stack.extend(reversed(list(graph.neighbors(node))))
    return seq

# Initialize empty graph
graph = nx.Graph()

# Add edges manually
while True:
    print("1: add edge  2: break")
    a = int(input("Enter operation: "))
    if a == 2:
        break
    if a == 1:
        x = input("Enter source node: ")
        y = input("Enter destination node: ")
        graph.add_edge(x, y)

print("\nInput Graph Edges:")
print(graph.edges())

print("\nNon-Recursive DFS Traversal")
start_node = input("Enter starting node for DFS: ")
non_rec_seq = dfs_non_recursive(graph, start_node)
print(' '.join(non_rec_seq))
